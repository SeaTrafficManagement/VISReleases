/*
 * Maritime Cloud Identity Registry API
 *
 * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@maritimecloud.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace STM.VIS.Services.Private.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Certificate :  IEquatable<Certificate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Certificate" /> class.
        /// </summary>
        /// <param name="_Certificate">The certificate on PEM format.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="End">End.</param>
        /// <param name="Id">Id.</param>
        /// <param name="RevokeReason">RevokeReason.</param>
        /// <param name="Revoked">Revoked.</param>
        /// <param name="RevokedAt">RevokedAt.</param>
        /// <param name="Start">Start.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public Certificate(string _Certificate = null, long? CreatedAt = null, long? End = null, long? Id = null, string RevokeReason = null, bool? Revoked = null, long? RevokedAt = null, long? Start = null, long? UpdatedAt = null)
        {
            this._Certificate = _Certificate;
            this.CreatedAt = CreatedAt;
            this.End = End;
            this.Id = Id;
            this.RevokeReason = RevokeReason;
            this.Revoked = Revoked;
            this.RevokedAt = RevokedAt;
            this.Start = Start;
            this.UpdatedAt = UpdatedAt;
            
        }

        /// <summary>
        /// The certificate on PEM format
        /// </summary>
        /// <value>The certificate on PEM format</value>
        [DataMember(Name="certificate")]
        public string _Certificate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt")]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end")]
        public long? End { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets RevokeReason
        /// </summary>
        [DataMember(Name="revokeReason")]
        public string RevokeReason { get; set; }

        /// <summary>
        /// Gets or Sets Revoked
        /// </summary>
        [DataMember(Name="revoked")]
        public bool? Revoked { get; set; }

        /// <summary>
        /// Gets or Sets RevokedAt
        /// </summary>
        [DataMember(Name="revokedAt")]
        public long? RevokedAt { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start")]
        public long? Start { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt")]
        public long? UpdatedAt { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Certificate {\n");
            sb.Append("  _Certificate: ").Append(_Certificate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RevokeReason: ").Append(RevokeReason).Append("\n");
            sb.Append("  Revoked: ").Append(Revoked).Append("\n");
            sb.Append("  RevokedAt: ").Append(RevokedAt).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Certificate)obj);
        }

        /// <summary>
        /// Returns true if Certificate instances are equal
        /// </summary>
        /// <param name="other">Instance of Certificate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Certificate other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this._Certificate == other._Certificate ||
                    this._Certificate != null &&
                    this._Certificate.Equals(other._Certificate)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.End == other.End ||
                    this.End != null &&
                    this.End.Equals(other.End)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.RevokeReason == other.RevokeReason ||
                    this.RevokeReason != null &&
                    this.RevokeReason.Equals(other.RevokeReason)
                ) && 
                (
                    this.Revoked == other.Revoked ||
                    this.Revoked != null &&
                    this.Revoked.Equals(other.Revoked)
                ) && 
                (
                    this.RevokedAt == other.RevokedAt ||
                    this.RevokedAt != null &&
                    this.RevokedAt.Equals(other.RevokedAt)
                ) && 
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this._Certificate != null)
                    hash = hash * 59 + this._Certificate.GetHashCode();
                    if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                    if (this.End != null)
                    hash = hash * 59 + this.End.GetHashCode();
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.RevokeReason != null)
                    hash = hash * 59 + this.RevokeReason.GetHashCode();
                    if (this.Revoked != null)
                    hash = hash * 59 + this.Revoked.GetHashCode();
                    if (this.RevokedAt != null)
                    hash = hash * 59 + this.RevokedAt.GetHashCode();
                    if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                    if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        #region Operators

        /// <summary>
        /// 
        /// </summary>
        /// <param name="left"></param>
        /// <param name="right"></param>
        /// <returns></returns>
        public static bool operator ==(Certificate left, Certificate right)
        {
            return Equals(left, right);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="left"></param>
        /// <param name="right"></param>
        /// <returns></returns>
        public static bool operator !=(Certificate left, Certificate right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
