/*
 * STM Voyage Information Service STM Onboard API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace STM.VIS.Services.Private.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Message : IEquatable<Message>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Message" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ReceivedAt">ReceivedAt.</param>
        /// <param name="From">From.</param>
        /// <param name="MessageType">MessageType.</param>
        /// <param name="StmMessage">StmMessage.</param>
        /// <param name="CallbackEndpoint"></param>
        public Message(string Id = null, DateTime? ReceivedAt = null, string From = null, string MessageType = null, StmMessage StmMessage = null, string CallbackEndpoint = null)
        {
            this.Id = Id;
            this.ReceivedAt = ReceivedAt;
            this.FromOrgId = From;
            this.MessageType = MessageType;
            this.StmMessage = StmMessage;
            this.CallbackEndpoint = CallbackEndpoint;
        }

        /// <summary>
        /// Gets or sets CallbackEndpoint
        /// </summary>
        [DataMember(Name = "CallbackEndpoint")]
        public string CallbackEndpoint { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedAt
        /// </summary>
        [DataMember(Name = "receivedAt")]
        public DateTime? ReceivedAt { get; set; }

        /// <summary>
        /// Gets or Sets FromOrgId
        /// </summary>
        [DataMember(Name = "FromOrgId")]
        public string FromOrgId { get; set; }
        /// <summary>
        /// Gets or Sets FromOrgName
        /// </summary>
        [DataMember(Name = "FromOrgName")]
        public string FromOrgName { get; set; }

        /// <summary>
        /// Gets or Sets FromServiceId
        /// </summary>
        [DataMember(Name = "FromServiceId")]
        public string FromServiceId { get; set; }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "messageType")]
        public string MessageType { get; set; }

        /// <summary>
        /// Gets or Sets StmMessage
        /// </summary>
        [DataMember(Name = "stmMessage")]
        public StmMessage StmMessage { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReceivedAt: ").Append(ReceivedAt).Append("\n");
            sb.Append("  FromOrdId: ").Append(FromOrgId).Append("\n");
            sb.Append("  FromOrdName: ").Append(FromOrgName).Append("\n");
            sb.Append("  FromServiceId: ").Append(FromServiceId).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  StmMessage: ").Append(StmMessage).Append("\n");
            sb.Append("  CallbackEndpoint: ").Append(CallbackEndpoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Message)obj);
        }

        /// <summary>
        /// Returns true if Message instances are equal
        /// </summary>
        /// <param name="other">Instance of Message to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Message other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) &&
                (
                    this.ReceivedAt == other.ReceivedAt ||
                    this.ReceivedAt != null &&
                    this.ReceivedAt.Equals(other.ReceivedAt)
                ) &&
                (
                    this.FromOrgId == other.FromOrgId ||
                    this.FromOrgId != null &&
                    this.FromOrgId.Equals(other.FromOrgId)
                ) &&
                (
                    this.FromOrgName == other.FromOrgName ||
                    this.FromOrgName != null &&
                    this.FromOrgName.Equals(other.FromOrgName)
                ) &&
                (
                    this.FromServiceId == other.FromServiceId ||
                    this.FromServiceId != null &&
                    this.FromServiceId.Equals(other.FromServiceId)
                ) &&
                (
                    this.MessageType == other.MessageType ||
                    this.MessageType != null &&
                    this.MessageType.Equals(other.MessageType)
                ) &&
                (
                    this.StmMessage == other.StmMessage ||
                    this.StmMessage != null &&
                    this.StmMessage.Equals(other.StmMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ReceivedAt != null)
                    hash = hash * 59 + this.ReceivedAt.GetHashCode();
                if (this.FromOrgId != null)
                    hash = hash * 59 + this.FromOrgId.GetHashCode();
                if (this.FromOrgName != null)
                    hash = hash * 59 + this.FromOrgName.GetHashCode();
                if (this.FromServiceId != null)
                    hash = hash * 59 + this.FromServiceId.GetHashCode();

                if (this.MessageType != null)
                    hash = hash * 59 + this.MessageType.GetHashCode();
                if (this.StmMessage != null)
                    hash = hash * 59 + this.StmMessage.GetHashCode();
                return hash;
            }
        }

        #region Operators

        /// <summary>
        /// 
        /// </summary>
        /// <param name="left"></param>
        /// <param name="right"></param>
        /// <returns></returns>
        public static bool operator ==(Message left, Message right)
        {
            return Equals(left, right);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="left"></param>
        /// <param name="right"></param>
        /// <returns></returns>
        public static bool operator !=(Message left, Message right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
