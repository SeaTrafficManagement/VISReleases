/*
 * STM Voyage Information Service STM Onboard API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using STM.SSC.Internal.Models;

namespace STM.SSC.Internal.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FindIdentitiesResponseObj :  IEquatable<FindIdentitiesResponseObj>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindIdentitiesResponseObj" /> class.
        /// </summary>
        /// <param name="Organizations">Organizations.</param>
        /// <param name="StatusCode">StatusCode.</param>
        /// <param name="StatusMessage">StatusMessage.</param>
        public FindIdentitiesResponseObj(List<Organization> Organizations = null, long? StatusCode = null, string StatusMessage = null)
        {
            this.Organizations = Organizations;
            this.StatusCode = StatusCode;
            this.StatusMessage = StatusMessage;
            
        }

        /// <summary>
        /// Gets or Sets Organizations
        /// </summary>
        [DataMember(Name="organizations")]
        public List<Organization> Organizations { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="statusCode")]
        public long? StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets StatusMessage
        /// </summary>
        [DataMember(Name="statusMessage")]
        public string StatusMessage { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindIdentitiesResponseObj {\n");
            sb.Append("  Organizations: ").Append(Organizations).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((FindIdentitiesResponseObj)obj);
        }

        /// <summary>
        /// Returns true if FindIdentitiesResponseObj instances are equal
        /// </summary>
        /// <param name="other">Instance of FindIdentitiesResponseObj to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindIdentitiesResponseObj other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Organizations == other.Organizations ||
                    this.Organizations != null &&
                    this.Organizations.SequenceEqual(other.Organizations)
                ) && 
                (
                    this.StatusCode == other.StatusCode ||
                    this.StatusCode != null &&
                    this.StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    this.StatusMessage == other.StatusMessage ||
                    this.StatusMessage != null &&
                    this.StatusMessage.Equals(other.StatusMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Organizations != null)
                    hash = hash * 59 + this.Organizations.GetHashCode();
                    if (this.StatusCode != null)
                    hash = hash * 59 + this.StatusCode.GetHashCode();
                    if (this.StatusMessage != null)
                    hash = hash * 59 + this.StatusMessage.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(FindIdentitiesResponseObj left, FindIdentitiesResponseObj right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FindIdentitiesResponseObj left, FindIdentitiesResponseObj right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
