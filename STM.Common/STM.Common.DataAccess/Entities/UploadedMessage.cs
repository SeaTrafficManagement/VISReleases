///////////////////////////////////////////////////////////
//  UploadedMessages.cs
//  Implementation of the Class UploadedMessages
//  Generated by Enterprise Architect
//  Created on:      18-nov-2016 13:07:31
//  Original author: M02AMIOL
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel.DataAnnotations;

namespace STM.Common.DataAccess.Entities
{

    /// <summary>
    /// Contains uploaded messages to SPIS to be forwarded to STM Module (e.g. route,
    /// text message, polygon)
    /// </summary>
    public class UploadedMessage
    {

        /// <summary>
        /// Flag when Acknowledgement is sent
        /// </summary>
        public bool AckDelivered { get; set; }

        /// <summary>
        /// Endpoint (complete URI) where Acknowledge shall be sent when message
        /// transferred to STM Module (ship or ship representative)
        /// </summary>

        public string DeliveryAckEndpoint { get; set; }

        /// <summary>
        /// Flag if Acknowledge is requested when message transferred to the STM Module
        /// (ship)
        /// </summary>
        public bool DeliveryAckReqested { get; set; }

        /// <summary>
        /// Flag if message is fetched/sent to STM Module (ship or ship representative)
        /// </summary>
        public bool FetchedByShip { get; set; }

        /// <summary>
        /// Time when message is fetched/sent to STM Module (ship or ship representative)
        /// </summary>
        public DateTime? FetchTime { get; set; }

        /// <summary>
        /// Source identity of the message
        /// </summary>
        [Required]
        public virtual Identity FromOrg { get; set; }

        /// <summary>
        /// Source service for the message
        /// </summary>
        public virtual string FromServiceId { get; set; }

        /// <summary>
        /// Unique internal identity
        /// </summary>
        public long ID { get; set; }

        /// <summary>
        /// The message in raw format
        /// </summary>
        [Required]
        public byte[] Message { get; set; }

        /// <summary>
        /// Type of message (enumeration)
        /// </summary>
        [Required]
        public virtual MessageType MessageType { get; set; }

        ///<summary>
        ///Message Data ID, when message is a rtz this is the same as UVID 
        /// </summary>
        public string MessageID { get; set; }

        /// <summary>
        /// Flag that is set to true when STM Module notify succeeded.
        /// </summary>
        public bool Notified { get; set; }

        /// <summary>
        /// Received time set by SPIS
        /// </summary>
        public DateTime ReceiveTime { get; set; }

        public string CallbackEndpoint { get; set; }

    }//end UploadedMessages
}