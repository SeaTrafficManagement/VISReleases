/*
 * Maritime Cloud Service Registry API
 *
 * Maritime Cloud Service Registry, developed under the Horizon 2020 Project EfficienSea2, cofunded by the European Union.
 *
 * OpenAPI spec version: 1.0
 * Contact: josef.jahn@frequentis.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace STM.StmModule.Simulator.Contract
{
    /// <summary>
    /// A SpecificationTemplate contains information on how to define a aspects ofa service.It has a type do differentiate between e.g. logical definitions andconcrete service instances.Templates will evolve, that&#39;s why they have a version.
    /// </summary>
    [DataContract]
    public partial class SpecificationTemplate :  IEquatable<SpecificationTemplate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecificationTemplate" /> class.
        /// </summary>
        /// <param name="Comment">Comment.</param>
        /// <param name="Docs">Docs.</param>
        /// <param name="GuidelineDoc">GuidelineDoc.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="TemplateDoc">TemplateDoc.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Version">Version.</param>
        /// <param name="Xsds">Xsds.</param>
        public SpecificationTemplate(string Comment = null, List<Doc> Docs = null, Doc GuidelineDoc = null, long? Id = null, string Name = null, Doc TemplateDoc = null, string Type = null, string Version = null, List<Xsd> Xsds = null)
        {
            this.Comment = Comment;
            this.Docs = Docs;
            this.GuidelineDoc = GuidelineDoc;
            this.Id = Id;
            this.Name = Name;
            this.TemplateDoc = TemplateDoc;
            this.Type = Type;
            this.Version = Version;
            this.Xsds = Xsds;
            
        }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Docs
        /// </summary>
        [DataMember(Name="docs")]
        public List<Doc> Docs { get; set; }

        /// <summary>
        /// Gets or Sets GuidelineDoc
        /// </summary>
        [DataMember(Name="guidelineDoc")]
        public Doc GuidelineDoc { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TemplateDoc
        /// </summary>
        [DataMember(Name="templateDoc")]
        public Doc TemplateDoc { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets Xsds
        /// </summary>
        [DataMember(Name="xsds")]
        public List<Xsd> Xsds { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpecificationTemplate {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Docs: ").Append(Docs).Append("\n");
            sb.Append("  GuidelineDoc: ").Append(GuidelineDoc).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TemplateDoc: ").Append(TemplateDoc).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Xsds: ").Append(Xsds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((SpecificationTemplate)obj);
        }

        /// <summary>
        /// Returns true if SpecificationTemplate instances are equal
        /// </summary>
        /// <param name="other">Instance of SpecificationTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecificationTemplate other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Comment == other.Comment ||
                    this.Comment != null &&
                    this.Comment.Equals(other.Comment)
                ) && 
                (
                    this.Docs == other.Docs ||
                    this.Docs != null &&
                    this.Docs.SequenceEqual(other.Docs)
                ) && 
                (
                    this.GuidelineDoc == other.GuidelineDoc ||
                    this.GuidelineDoc != null &&
                    this.GuidelineDoc.Equals(other.GuidelineDoc)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.TemplateDoc == other.TemplateDoc ||
                    this.TemplateDoc != null &&
                    this.TemplateDoc.Equals(other.TemplateDoc)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.Xsds == other.Xsds ||
                    this.Xsds != null &&
                    this.Xsds.SequenceEqual(other.Xsds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Comment != null)
                    hash = hash * 59 + this.Comment.GetHashCode();
                    if (this.Docs != null)
                    hash = hash * 59 + this.Docs.GetHashCode();
                    if (this.GuidelineDoc != null)
                    hash = hash * 59 + this.GuidelineDoc.GetHashCode();
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.TemplateDoc != null)
                    hash = hash * 59 + this.TemplateDoc.GetHashCode();
                    if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                    if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                    if (this.Xsds != null)
                    hash = hash * 59 + this.Xsds.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(SpecificationTemplate left, SpecificationTemplate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SpecificationTemplate left, SpecificationTemplate right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
