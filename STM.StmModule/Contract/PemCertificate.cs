/*
 * Maritime Cloud Identity Registry API
 *
 * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@maritimecloud.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace STM.StmModule.Simulator.Contract
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PemCertificate :  IEquatable<PemCertificate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PemCertificate" /> class.
        /// </summary>
        /// <param name="Certificate">Certificate.</param>
        /// <param name="PrivateKey">PrivateKey.</param>
        /// <param name="PublicKey">PublicKey.</param>
        public PemCertificate(string Certificate = null, string PrivateKey = null, string PublicKey = null)
        {
            this.Certificate = Certificate;
            this.PrivateKey = PrivateKey;
            this.PublicKey = PublicKey;
            
        }

        /// <summary>
        /// Gets or Sets Certificate
        /// </summary>
        [DataMember(Name="certificate")]
        public string Certificate { get; set; }

        /// <summary>
        /// Gets or Sets PrivateKey
        /// </summary>
        [DataMember(Name="privateKey")]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets PublicKey
        /// </summary>
        [DataMember(Name="publicKey")]
        public string PublicKey { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PemCertificate {\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((PemCertificate)obj);
        }

        /// <summary>
        /// Returns true if PemCertificate instances are equal
        /// </summary>
        /// <param name="other">Instance of PemCertificate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PemCertificate other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Certificate == other.Certificate ||
                    this.Certificate != null &&
                    this.Certificate.Equals(other.Certificate)
                ) && 
                (
                    this.PrivateKey == other.PrivateKey ||
                    this.PrivateKey != null &&
                    this.PrivateKey.Equals(other.PrivateKey)
                ) && 
                (
                    this.PublicKey == other.PublicKey ||
                    this.PublicKey != null &&
                    this.PublicKey.Equals(other.PublicKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Certificate != null)
                    hash = hash * 59 + this.Certificate.GetHashCode();
                    if (this.PrivateKey != null)
                    hash = hash * 59 + this.PrivateKey.GetHashCode();
                    if (this.PublicKey != null)
                    hash = hash * 59 + this.PublicKey.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(PemCertificate left, PemCertificate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PemCertificate left, PemCertificate right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
