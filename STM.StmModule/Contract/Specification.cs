/*
 * Maritime Cloud Service Registry API
 *
 * Maritime Cloud Service Registry, developed under the Horizon 2020 Project EfficienSea2, cofunded by the European Union.
 *
 * OpenAPI spec version: 1.0
 * Contact: josef.jahn@frequentis.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace STM.StmModule.Simulator.Contract
{
    /// <summary>
    /// Holds a logical description of a service.A specification can be compatible to one or morespecification templates.It has at least a technical representation of the servicedescriptiion in form of an XML and a filled out service templateas e.g. word document.
    /// </summary>
    [DataContract]
    public partial class Specification :  IEquatable<Specification>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Specification" /> class.
        /// </summary>
        /// <param name="Comment">Comment.</param>
        /// <param name="Docs">Docs.</param>
        /// <param name="Id">Id.</param>
        /// <param name="ImplementedSpecificationVersion">ImplementedSpecificationVersion.</param>
        /// <param name="Keywords">Keywords.</param>
        /// <param name="Name">Name.</param>
        /// <param name="OrganizationId">OrganizationId.</param>
        /// <param name="SpecAsDoc">SpecAsDoc.</param>
        /// <param name="SpecAsXml">SpecAsXml.</param>
        /// <param name="SpecificationId">SpecificationId.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Version">Version.</param>
        public Specification(string Comment = null, List<Doc> Docs = null, long? Id = null, SpecificationTemplate ImplementedSpecificationVersion = null, string Keywords = null, string Name = null, string OrganizationId = null, Doc SpecAsDoc = null, Xml SpecAsXml = null, string SpecificationId = null, string Status = null, string Version = null)
        {
            this.Comment = Comment;
            this.Docs = Docs;
            this.Id = Id;
            this.ImplementedSpecificationVersion = ImplementedSpecificationVersion;
            this.Keywords = Keywords;
            this.Name = Name;
            this.OrganizationId = OrganizationId;
            this.SpecAsDoc = SpecAsDoc;
            this.SpecAsXml = SpecAsXml;
            this.SpecificationId = SpecificationId;
            this.Status = Status;
            this.Version = Version;
            
        }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Docs
        /// </summary>
        [DataMember(Name="docs")]
        public List<Doc> Docs { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ImplementedSpecificationVersion
        /// </summary>
        [DataMember(Name="implementedSpecificationVersion")]
        public SpecificationTemplate ImplementedSpecificationVersion { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name="keywords")]
        public string Keywords { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organizationId")]
        public string OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets SpecAsDoc
        /// </summary>
        [DataMember(Name="specAsDoc")]
        public Doc SpecAsDoc { get; set; }

        /// <summary>
        /// Gets or Sets SpecAsXml
        /// </summary>
        [DataMember(Name="specAsXml")]
        public Xml SpecAsXml { get; set; }

        /// <summary>
        /// Gets or Sets SpecificationId
        /// </summary>
        [DataMember(Name="specificationId")]
        public string SpecificationId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version")]
        public string Version { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Specification {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Docs: ").Append(Docs).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImplementedSpecificationVersion: ").Append(ImplementedSpecificationVersion).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  SpecAsDoc: ").Append(SpecAsDoc).Append("\n");
            sb.Append("  SpecAsXml: ").Append(SpecAsXml).Append("\n");
            sb.Append("  SpecificationId: ").Append(SpecificationId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Specification)obj);
        }

        /// <summary>
        /// Returns true if Specification instances are equal
        /// </summary>
        /// <param name="other">Instance of Specification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Specification other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Comment == other.Comment ||
                    this.Comment != null &&
                    this.Comment.Equals(other.Comment)
                ) && 
                (
                    this.Docs == other.Docs ||
                    this.Docs != null &&
                    this.Docs.SequenceEqual(other.Docs)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ImplementedSpecificationVersion == other.ImplementedSpecificationVersion ||
                    this.ImplementedSpecificationVersion != null &&
                    this.ImplementedSpecificationVersion.Equals(other.ImplementedSpecificationVersion)
                ) && 
                (
                    this.Keywords == other.Keywords ||
                    this.Keywords != null &&
                    this.Keywords.Equals(other.Keywords)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.SpecAsDoc == other.SpecAsDoc ||
                    this.SpecAsDoc != null &&
                    this.SpecAsDoc.Equals(other.SpecAsDoc)
                ) && 
                (
                    this.SpecAsXml == other.SpecAsXml ||
                    this.SpecAsXml != null &&
                    this.SpecAsXml.Equals(other.SpecAsXml)
                ) && 
                (
                    this.SpecificationId == other.SpecificationId ||
                    this.SpecificationId != null &&
                    this.SpecificationId.Equals(other.SpecificationId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Comment != null)
                    hash = hash * 59 + this.Comment.GetHashCode();
                    if (this.Docs != null)
                    hash = hash * 59 + this.Docs.GetHashCode();
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.ImplementedSpecificationVersion != null)
                    hash = hash * 59 + this.ImplementedSpecificationVersion.GetHashCode();
                    if (this.Keywords != null)
                    hash = hash * 59 + this.Keywords.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                    if (this.SpecAsDoc != null)
                    hash = hash * 59 + this.SpecAsDoc.GetHashCode();
                    if (this.SpecAsXml != null)
                    hash = hash * 59 + this.SpecAsXml.GetHashCode();
                    if (this.SpecificationId != null)
                    hash = hash * 59 + this.SpecificationId.GetHashCode();
                    if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                    if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Specification left, Specification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Specification left, Specification right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
