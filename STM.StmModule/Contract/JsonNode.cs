/*
 * Maritime Cloud Service Registry API
 *
 * Maritime Cloud Service Registry, developed under the Horizon 2020 Project EfficienSea2, cofunded by the European Union.
 *
 * OpenAPI spec version: 1.0
 * Contact: josef.jahn@frequentis.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace STM.StmModule.Simulator.Contract
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class JsonNode :  IEquatable<JsonNode>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonNode" /> class.
        /// </summary>
        /// <param name="Array">Array.</param>
        /// <param name="BigDecimal">BigDecimal.</param>
        /// <param name="BigInteger">BigInteger.</param>
        /// <param name="Binary">Binary.</param>
        /// <param name="Boolean">Boolean.</param>
        /// <param name="ContainerNode">ContainerNode.</param>
        /// <param name="Double">Double.</param>
        /// <param name="Float">Float.</param>
        /// <param name="FloatingPointNumber">FloatingPointNumber.</param>
        /// <param name="Int">Int.</param>
        /// <param name="IntegralNumber">IntegralNumber.</param>
        /// <param name="Long">Long.</param>
        /// <param name="MissingNode">MissingNode.</param>
        /// <param name="NodeType">NodeType.</param>
        /// <param name="Null">Null.</param>
        /// <param name="Number">Number.</param>
        /// <param name="Object">Object.</param>
        /// <param name="Pojo">Pojo.</param>
        /// <param name="Short">Short.</param>
        /// <param name="Textual">Textual.</param>
        /// <param name="ValueNode">ValueNode.</param>
        public JsonNode(bool? Array = null, bool? BigDecimal = null, bool? BigInteger = null, bool? Binary = null, bool? Boolean = null, bool? ContainerNode = null, bool? Double = null, bool? Float = null, bool? FloatingPointNumber = null, bool? Int = null, bool? IntegralNumber = null, bool? Long = null, bool? MissingNode = null, string NodeType = null, bool? Null = null, bool? Number = null, bool? Object = null, bool? Pojo = null, bool? Short = null, bool? Textual = null, bool? ValueNode = null)
        {
            this.Array = Array;
            this.BigDecimal = BigDecimal;
            this.BigInteger = BigInteger;
            this.Binary = Binary;
            this.Boolean = Boolean;
            this.ContainerNode = ContainerNode;
            this.Double = Double;
            this.Float = Float;
            this.FloatingPointNumber = FloatingPointNumber;
            this.Int = Int;
            this.IntegralNumber = IntegralNumber;
            this.Long = Long;
            this.MissingNode = MissingNode;
            this.NodeType = NodeType;
            this.Null = Null;
            this.Number = Number;
            this.Object = Object;
            this.Pojo = Pojo;
            this.Short = Short;
            this.Textual = Textual;
            this.ValueNode = ValueNode;
            
        }

        /// <summary>
        /// Gets or Sets Array
        /// </summary>
        [DataMember(Name="array")]
        public bool? Array { get; set; }

        /// <summary>
        /// Gets or Sets BigDecimal
        /// </summary>
        [DataMember(Name="bigDecimal")]
        public bool? BigDecimal { get; set; }

        /// <summary>
        /// Gets or Sets BigInteger
        /// </summary>
        [DataMember(Name="bigInteger")]
        public bool? BigInteger { get; set; }

        /// <summary>
        /// Gets or Sets Binary
        /// </summary>
        [DataMember(Name="binary")]
        public bool? Binary { get; set; }

        /// <summary>
        /// Gets or Sets Boolean
        /// </summary>
        [DataMember(Name="boolean")]
        public bool? Boolean { get; set; }

        /// <summary>
        /// Gets or Sets ContainerNode
        /// </summary>
        [DataMember(Name="containerNode")]
        public bool? ContainerNode { get; set; }

        /// <summary>
        /// Gets or Sets Double
        /// </summary>
        [DataMember(Name="double")]
        public bool? Double { get; set; }

        /// <summary>
        /// Gets or Sets Float
        /// </summary>
        [DataMember(Name="float")]
        public bool? Float { get; set; }

        /// <summary>
        /// Gets or Sets FloatingPointNumber
        /// </summary>
        [DataMember(Name="floatingPointNumber")]
        public bool? FloatingPointNumber { get; set; }

        /// <summary>
        /// Gets or Sets Int
        /// </summary>
        [DataMember(Name="int")]
        public bool? Int { get; set; }

        /// <summary>
        /// Gets or Sets IntegralNumber
        /// </summary>
        [DataMember(Name="integralNumber")]
        public bool? IntegralNumber { get; set; }

        /// <summary>
        /// Gets or Sets Long
        /// </summary>
        [DataMember(Name="long")]
        public bool? Long { get; set; }

        /// <summary>
        /// Gets or Sets MissingNode
        /// </summary>
        [DataMember(Name="missingNode")]
        public bool? MissingNode { get; set; }

        /// <summary>
        /// Gets or Sets NodeType
        /// </summary>
        [DataMember(Name="nodeType")]
        public string NodeType { get; set; }

        /// <summary>
        /// Gets or Sets Null
        /// </summary>
        [DataMember(Name="null")]
        public bool? Null { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number")]
        public bool? Number { get; set; }

        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name="object")]
        public bool? Object { get; set; }

        /// <summary>
        /// Gets or Sets Pojo
        /// </summary>
        [DataMember(Name="pojo")]
        public bool? Pojo { get; set; }

        /// <summary>
        /// Gets or Sets Short
        /// </summary>
        [DataMember(Name="short")]
        public bool? Short { get; set; }

        /// <summary>
        /// Gets or Sets Textual
        /// </summary>
        [DataMember(Name="textual")]
        public bool? Textual { get; set; }

        /// <summary>
        /// Gets or Sets ValueNode
        /// </summary>
        [DataMember(Name="valueNode")]
        public bool? ValueNode { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonNode {\n");
            sb.Append("  Array: ").Append(Array).Append("\n");
            sb.Append("  BigDecimal: ").Append(BigDecimal).Append("\n");
            sb.Append("  BigInteger: ").Append(BigInteger).Append("\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  Boolean: ").Append(Boolean).Append("\n");
            sb.Append("  ContainerNode: ").Append(ContainerNode).Append("\n");
            sb.Append("  Double: ").Append(Double).Append("\n");
            sb.Append("  Float: ").Append(Float).Append("\n");
            sb.Append("  FloatingPointNumber: ").Append(FloatingPointNumber).Append("\n");
            sb.Append("  Int: ").Append(Int).Append("\n");
            sb.Append("  IntegralNumber: ").Append(IntegralNumber).Append("\n");
            sb.Append("  Long: ").Append(Long).Append("\n");
            sb.Append("  MissingNode: ").Append(MissingNode).Append("\n");
            sb.Append("  NodeType: ").Append(NodeType).Append("\n");
            sb.Append("  Null: ").Append(Null).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Pojo: ").Append(Pojo).Append("\n");
            sb.Append("  Short: ").Append(Short).Append("\n");
            sb.Append("  Textual: ").Append(Textual).Append("\n");
            sb.Append("  ValueNode: ").Append(ValueNode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((JsonNode)obj);
        }

        /// <summary>
        /// Returns true if JsonNode instances are equal
        /// </summary>
        /// <param name="other">Instance of JsonNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonNode other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Array == other.Array ||
                    this.Array != null &&
                    this.Array.Equals(other.Array)
                ) && 
                (
                    this.BigDecimal == other.BigDecimal ||
                    this.BigDecimal != null &&
                    this.BigDecimal.Equals(other.BigDecimal)
                ) && 
                (
                    this.BigInteger == other.BigInteger ||
                    this.BigInteger != null &&
                    this.BigInteger.Equals(other.BigInteger)
                ) && 
                (
                    this.Binary == other.Binary ||
                    this.Binary != null &&
                    this.Binary.Equals(other.Binary)
                ) && 
                (
                    this.Boolean == other.Boolean ||
                    this.Boolean != null &&
                    this.Boolean.Equals(other.Boolean)
                ) && 
                (
                    this.ContainerNode == other.ContainerNode ||
                    this.ContainerNode != null &&
                    this.ContainerNode.Equals(other.ContainerNode)
                ) && 
                (
                    this.Double == other.Double ||
                    this.Double != null &&
                    this.Double.Equals(other.Double)
                ) && 
                (
                    this.Float == other.Float ||
                    this.Float != null &&
                    this.Float.Equals(other.Float)
                ) && 
                (
                    this.FloatingPointNumber == other.FloatingPointNumber ||
                    this.FloatingPointNumber != null &&
                    this.FloatingPointNumber.Equals(other.FloatingPointNumber)
                ) && 
                (
                    this.Int == other.Int ||
                    this.Int != null &&
                    this.Int.Equals(other.Int)
                ) && 
                (
                    this.IntegralNumber == other.IntegralNumber ||
                    this.IntegralNumber != null &&
                    this.IntegralNumber.Equals(other.IntegralNumber)
                ) && 
                (
                    this.Long == other.Long ||
                    this.Long != null &&
                    this.Long.Equals(other.Long)
                ) && 
                (
                    this.MissingNode == other.MissingNode ||
                    this.MissingNode != null &&
                    this.MissingNode.Equals(other.MissingNode)
                ) && 
                (
                    this.NodeType == other.NodeType ||
                    this.NodeType != null &&
                    this.NodeType.Equals(other.NodeType)
                ) && 
                (
                    this.Null == other.Null ||
                    this.Null != null &&
                    this.Null.Equals(other.Null)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.Object == other.Object ||
                    this.Object != null &&
                    this.Object.Equals(other.Object)
                ) && 
                (
                    this.Pojo == other.Pojo ||
                    this.Pojo != null &&
                    this.Pojo.Equals(other.Pojo)
                ) && 
                (
                    this.Short == other.Short ||
                    this.Short != null &&
                    this.Short.Equals(other.Short)
                ) && 
                (
                    this.Textual == other.Textual ||
                    this.Textual != null &&
                    this.Textual.Equals(other.Textual)
                ) && 
                (
                    this.ValueNode == other.ValueNode ||
                    this.ValueNode != null &&
                    this.ValueNode.Equals(other.ValueNode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Array != null)
                    hash = hash * 59 + this.Array.GetHashCode();
                    if (this.BigDecimal != null)
                    hash = hash * 59 + this.BigDecimal.GetHashCode();
                    if (this.BigInteger != null)
                    hash = hash * 59 + this.BigInteger.GetHashCode();
                    if (this.Binary != null)
                    hash = hash * 59 + this.Binary.GetHashCode();
                    if (this.Boolean != null)
                    hash = hash * 59 + this.Boolean.GetHashCode();
                    if (this.ContainerNode != null)
                    hash = hash * 59 + this.ContainerNode.GetHashCode();
                    if (this.Double != null)
                    hash = hash * 59 + this.Double.GetHashCode();
                    if (this.Float != null)
                    hash = hash * 59 + this.Float.GetHashCode();
                    if (this.FloatingPointNumber != null)
                    hash = hash * 59 + this.FloatingPointNumber.GetHashCode();
                    if (this.Int != null)
                    hash = hash * 59 + this.Int.GetHashCode();
                    if (this.IntegralNumber != null)
                    hash = hash * 59 + this.IntegralNumber.GetHashCode();
                    if (this.Long != null)
                    hash = hash * 59 + this.Long.GetHashCode();
                    if (this.MissingNode != null)
                    hash = hash * 59 + this.MissingNode.GetHashCode();
                    if (this.NodeType != null)
                    hash = hash * 59 + this.NodeType.GetHashCode();
                    if (this.Null != null)
                    hash = hash * 59 + this.Null.GetHashCode();
                    if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                    if (this.Object != null)
                    hash = hash * 59 + this.Object.GetHashCode();
                    if (this.Pojo != null)
                    hash = hash * 59 + this.Pojo.GetHashCode();
                    if (this.Short != null)
                    hash = hash * 59 + this.Short.GetHashCode();
                    if (this.Textual != null)
                    hash = hash * 59 + this.Textual.GetHashCode();
                    if (this.ValueNode != null)
                    hash = hash * 59 + this.ValueNode.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(JsonNode left, JsonNode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JsonNode left, JsonNode right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
