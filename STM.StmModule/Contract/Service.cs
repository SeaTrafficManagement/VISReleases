/*
 * Maritime Cloud Identity Registry API
 *
 * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@maritimecloud.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace STM.StmModule.Simulator.Contract
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Service :  IEquatable<Service>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Service" /> class.
        /// </summary>
        /// <param name="CertDomainName">The domain name the service will be available on. Used in the issued certificates for the service..</param>
        /// <param name="Certificates">Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls..</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="Mrn">The Maritime Resource Name (required).</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="OidcAccessType">Access type of the OpenId Connect client.</param>
        /// <param name="OidcClientId">The client id of the service in Maritime Cloud. Will be generated..</param>
        /// <param name="OidcClientSecret">The client secret of the service in Maritime Cloud. Will be generated..</param>
        /// <param name="OidcRedirectUri">The OpenId Connect redirect uri of service..</param>
        /// <param name="Permissions">Permissions as assigned from the organization.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public Service(string CertDomainName = null, List<Certificate> Certificates = null, DateTime? CreatedAt = null, string Mrn = null, string Name = null, string OidcAccessType = null, string OidcClientId = null, string OidcClientSecret = null, string OidcRedirectUri = null, string Permissions = null, DateTime? UpdatedAt = null)
        {
            // to ensure "Mrn" is required (not null)
            if (Mrn == null)
            {
                throw new InvalidDataException("Mrn is a required property for Service and cannot be null");
            }
            else
            {
                this.Mrn = Mrn;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Service and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.CertDomainName = CertDomainName;
            this.Certificates = Certificates;
            this.CreatedAt = CreatedAt;
            this.OidcAccessType = OidcAccessType;
            this.OidcClientId = OidcClientId;
            this.OidcClientSecret = OidcClientSecret;
            this.OidcRedirectUri = OidcRedirectUri;
            this.Permissions = Permissions;
            this.UpdatedAt = UpdatedAt;
            
        }

        /// <summary>
        /// The domain name the service will be available on. Used in the issued certificates for the service.
        /// </summary>
        /// <value>The domain name the service will be available on. Used in the issued certificates for the service.</value>
        [DataMember(Name="certDomainName")]
        public string CertDomainName { get; set; }

        /// <summary>
        /// Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.
        /// </summary>
        /// <value>Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.</value>
        [DataMember(Name="certificates")]
        public List<Certificate> Certificates { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt")]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// The Maritime Resource Name
        /// </summary>
        /// <value>The Maritime Resource Name</value>
        [DataMember(Name="mrn")]
        public string Mrn { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Access type of the OpenId Connect client
        /// </summary>
        /// <value>Access type of the OpenId Connect client</value>
        [DataMember(Name="oidcAccessType")]
        public string OidcAccessType { get; set; }

        /// <summary>
        /// The client id of the service in Maritime Cloud. Will be generated.
        /// </summary>
        /// <value>The client id of the service in Maritime Cloud. Will be generated.</value>
        [DataMember(Name="oidcClientId")]
        public string OidcClientId { get; set; }

        /// <summary>
        /// The client secret of the service in Maritime Cloud. Will be generated.
        /// </summary>
        /// <value>The client secret of the service in Maritime Cloud. Will be generated.</value>
        [DataMember(Name="oidcClientSecret")]
        public string OidcClientSecret { get; set; }

        /// <summary>
        /// The OpenId Connect redirect uri of service.
        /// </summary>
        /// <value>The OpenId Connect redirect uri of service.</value>
        [DataMember(Name="oidcRedirectUri")]
        public string OidcRedirectUri { get; set; }

        /// <summary>
        /// Permissions as assigned from the organization
        /// </summary>
        /// <value>Permissions as assigned from the organization</value>
        [DataMember(Name="permissions")]
        public string Permissions { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt")]
        public DateTime? UpdatedAt { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Service {\n");
            sb.Append("  CertDomainName: ").Append(CertDomainName).Append("\n");
            sb.Append("  Certificates: ").Append(Certificates).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Mrn: ").Append(Mrn).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OidcAccessType: ").Append(OidcAccessType).Append("\n");
            sb.Append("  OidcClientId: ").Append(OidcClientId).Append("\n");
            sb.Append("  OidcClientSecret: ").Append(OidcClientSecret).Append("\n");
            sb.Append("  OidcRedirectUri: ").Append(OidcRedirectUri).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Service)obj);
        }

        /// <summary>
        /// Returns true if Service instances are equal
        /// </summary>
        /// <param name="other">Instance of Service to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Service other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CertDomainName == other.CertDomainName ||
                    this.CertDomainName != null &&
                    this.CertDomainName.Equals(other.CertDomainName)
                ) && 
                (
                    this.Certificates == other.Certificates ||
                    this.Certificates != null &&
                    this.Certificates.SequenceEqual(other.Certificates)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Mrn == other.Mrn ||
                    this.Mrn != null &&
                    this.Mrn.Equals(other.Mrn)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.OidcAccessType == other.OidcAccessType ||
                    this.OidcAccessType != null &&
                    this.OidcAccessType.Equals(other.OidcAccessType)
                ) && 
                (
                    this.OidcClientId == other.OidcClientId ||
                    this.OidcClientId != null &&
                    this.OidcClientId.Equals(other.OidcClientId)
                ) && 
                (
                    this.OidcClientSecret == other.OidcClientSecret ||
                    this.OidcClientSecret != null &&
                    this.OidcClientSecret.Equals(other.OidcClientSecret)
                ) && 
                (
                    this.OidcRedirectUri == other.OidcRedirectUri ||
                    this.OidcRedirectUri != null &&
                    this.OidcRedirectUri.Equals(other.OidcRedirectUri)
                ) && 
                (
                    this.Permissions == other.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.Equals(other.Permissions)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.CertDomainName != null)
                    hash = hash * 59 + this.CertDomainName.GetHashCode();
                    if (this.Certificates != null)
                    hash = hash * 59 + this.Certificates.GetHashCode();
                    if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                    if (this.Mrn != null)
                    hash = hash * 59 + this.Mrn.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.OidcAccessType != null)
                    hash = hash * 59 + this.OidcAccessType.GetHashCode();
                    if (this.OidcClientId != null)
                    hash = hash * 59 + this.OidcClientId.GetHashCode();
                    if (this.OidcClientSecret != null)
                    hash = hash * 59 + this.OidcClientSecret.GetHashCode();
                    if (this.OidcRedirectUri != null)
                    hash = hash * 59 + this.OidcRedirectUri.GetHashCode();
                    if (this.Permissions != null)
                    hash = hash * 59 + this.Permissions.GetHashCode();
                    if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Service left, Service right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Service left, Service right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
